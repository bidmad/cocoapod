// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ADOPUtility
@_exported import ADOPUtility
import AdSupport
import AppTrackingTransparency
import Foundation
import Network
import Swift
import UIKit
public enum BidmadAppLovinFailCases : Swift.Int {
  case fetch_ad_timeout
  case no_network
  case no_fill
  case unable_to_render_ad
  case unspecified_error
  case unable_to_prepare_native_ad
  case unable_to_precache_resources
  case unable_to_precache_image_resources
  case unable_to_precache_video_resources
  case incentivized_no_ad_preloaded
  case incentivized_unknown_server_error
  case incentivized_server_timeout
  case incentivized_user_closed_video
  case invalid_url
  case unknown
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct LoadableConditions : Swift.CustomStringConvertible {
  public var loadableDuringInitProcess: Swift.Bool
  public var loadableDuringLoading: Swift.Bool
  public var loadableWhenLoaded: Swift.Bool
  public var loadableDuringPlaying: Swift.Bool
  public init(loadableDuringInitProcess: Swift.Bool, loadableDuringLoading: Swift.Bool, loadableWhenLoaded: Swift.Bool, loadableDuringPlaying: Swift.Bool = true)
  public var description: Swift.String {
    get
  }
}
public enum AdStatus {
  case isInitProcess
  case isLoading
  case isLoaded
  case isPlaying
  public static func == (a: ADOPUtility.AdStatus, b: ADOPUtility.AdStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct AdClassStatus : Swift.CustomStringConvertible {
  public var isInitProcess: [Foundation.UUID : Swift.Bool]
  public var isLoading: [Foundation.UUID : Swift.Bool]
  public var isLoaded: [Foundation.UUID : Swift.Bool]
  public var isPlaying: [Foundation.UUID : Swift.Bool]
  public init()
  public var description: Swift.String {
    get
  }
  public mutating func startAdCycle(target: Foundation.UUID)
  public mutating func resetAdCycle(target: Foundation.UUID)
  public mutating func endAdCycle(target: Foundation.UUID)
  public mutating func statusSwitch(to status: ADOPUtility.AdStatus, target: Foundation.UUID)
}
public protocol BidmadLoadabilityChecker {
  var adIdentifier: Foundation.UUID { get }
  static var loadableConditions: ADOPUtility.LoadableConditions { get set }
  static var adClassStatus: ADOPUtility.AdClassStatus { get set }
  var loadableConditionsPassed: Swift.Bool { get set }
}
public enum bidmadSupportedBannerSize : Swift.String {
  case banner300x50
  case banner320x50
  case banner320x90
  case banner320x100
  case banner300x250
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension UIView {
  public func bidmadSetCenter(of viewToCenter: UIKit.UIView, withSize bannerSize: CoreGraphics.CGSize)
}
public struct ADOPScheduler {
  public init(_ dispatchQueue: Dispatch.DispatchQueue)
}
extension ADOPScheduler {
  public func async(_ execute: @escaping () -> Swift.Void)
}
extension ADOPScheduler {
  public static let main: ADOPUtility.ADOPScheduler
  public static let userInitiated: ADOPUtility.ADOPScheduler
  public static let background: ADOPUtility.ADOPScheduler
  public static let utility: ADOPUtility.ADOPScheduler
}
@objc public protocol BidmadAdapterEssential {
  @objc var bidmadController: Swift.AnyObject? { get set }
  @objc init(appID: Swift.String, pubID: Swift.String?, rootVC: UIKit.UIViewController, parentView: UIKit.UIView?, isChild: Foundation.NSNumber?, isGDPRConsent: Foundation.NSNumber?, isCCPAConsent: Foundation.NSNumber?)
  @objc func load()
  @objc func show()
  @objc func remove()
  @objc func setIsDebug(_ isDebug: Swift.Bool)
}
@objc public protocol BidmadAdapterBannerAdditional {
  @objc func setBannerSize(_ sizeString: Swift.String)
  @objc func hide()
}
@objc public protocol BidmadAdapterRewardAdditional {
  @objc func setIsRewardedAd(_ isRewardedAd: Swift.Bool)
}
@objc public protocol BidmadAdapterOfferwallAdditional {
  @objc func getCurrency(completionHandler: ((Foundation.NSError?, [Swift.String : Any]?) -> Swift.Void)?)
  @objc func spendCurrency(_ amount: Swift.Int, completionHandler: ((Foundation.NSError?, [Swift.String : Any]?) -> Swift.Void)?)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class ADOPObjCUtility : ObjectiveC.NSObject {
  @objc public static func shouldNetworkReq(criterion adWeight: Swift.AnyObject?) -> Swift.Bool
  @objc public static func identifierForAdvertising() -> Swift.String?
  @objc public static func repeatAction(_ action: @escaping () -> Swift.Void, for seconds: Swift.Double, _ shouldStop: ADOPUtility.ADOPRepeatStopper? = nil) -> ADOPUtility.ADOPRepeatStopper
  @objc public static func logger(_ stringToPrint: [Swift.String])
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @objcMembers open class ADOPRepeatStopper : ObjectiveC.NSObject {
  @objc public var shouldStop: Foundation.NSNumber
  @objc deinit
  @objc override dynamic public init()
}
@frozen public enum ADOPEvent<E> {
  case next(E)
  case error(Swift.Error)
  case completed
}
extension ADOPEvent : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public enum BidmadInnerCallbackCases {
  case LOAD
  case FAIL
  case CLICK
  case SHOW
  case CLOSE
  case SKIPPED
  case REWARDED
  case INIT
  case INIT_FAIL
  public static func == (a: ADOPUtility.BidmadInnerCallbackCases, b: ADOPUtility.BidmadInnerCallbackCases) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum BidmadFailCase : Swift.String {
  case unsupportedbannersize
  case unavailableappid
  case unavailablepubid
  case unavailableviewcontroller
  case unavailableview
  case unavailablebannersize
  case notloaded
  case notinit
  case adcolonyexpired
  case timeout
  case noresponse
  case cannotLoadWhilePlaying
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc @objcMembers open class BidmadAdapterAdEssential : ObjectiveC.NSObject {
  @objc dynamic public var bidmadController: Swift.AnyObject?
  @objc public var appID: Swift.String?
  @objc public var pubID: Swift.String?
  @objc public var rootVC: UIKit.UIViewController
  @objc public var parentView: UIKit.UIView?
  @objc public var debugMode: Swift.Bool
  @objc final public let childDirectedTreatment: Foundation.NSNumber?
  @objc final public let isGDPRConsent: Foundation.NSNumber?
  @objc final public let isCCPAConsent: Foundation.NSNumber?
  @objc required public init(appID: Swift.String, pubID: Swift.String?, rootVC: UIKit.UIViewController, parentView: UIKit.UIView?, isChild: Foundation.NSNumber?, isGDPRConsent: Foundation.NSNumber?, isCCPAConsent: Foundation.NSNumber?)
  public func bidmadInnerCallback(innerCallbackCase: ADOPUtility.BidmadInnerCallbackCases, error: ADOPUtility.BidmadFailCase? = nil, message: Swift.String? = nil)
  @objc public static func ifRespondsPerform(_ callbackController: Swift.AnyObject, methodToCall: Swift.String, with object1: Any? = nil, with object2: Any? = nil)
  public static func initialLoadabilityCheck<T>(classToCheck: T.Type) -> Swift.Bool where T : ADOPUtility.BidmadLoadabilityChecker
  public static func reasonForLoadabilityCheckFail<T>(classToCheck: T.Type) -> Swift.String where T : ADOPUtility.BidmadLoadabilityChecker
  @objc deinit
  @objc override dynamic public init()
}
public class ADOPPublishSubject<E> : ADOPUtility.ADOPObservableType, ADOPUtility.ADOPObserverType {
  public init()
  public typealias Element = E
  public func subscribe<O>(_ observer: O) -> ADOPUtility.ADOPDisposable where E == O.Element, O : ADOPUtility.ADOPObserverType
  public func on(_ event: ADOPUtility.ADOPEvent<E>)
  @objc deinit
}
public protocol ADOPObserverType {
  associatedtype Element
  func on(_ event: ADOPUtility.ADOPEvent<Self.Element>)
}
public class ADOPObserver<E> : ADOPUtility.ADOPObserverType {
  public typealias Element = E
  public init(_ on: @escaping (ADOPUtility.ADOPEvent<E>) -> Swift.Void)
  public func on(_ event: ADOPUtility.ADOPEvent<E>)
  @objc deinit
}
public protocol ADOPDisposable {
  func dispose()
}
public class ADOPDisposer : ADOPUtility.ADOPDisposable {
  public var isDisposed: Swift.Bool
  public init(_ dispose: @escaping () -> Swift.Void = {})
  public func dispose()
  public func setDispose(_ dispose: @escaping () -> Swift.Void)
  @objc deinit
}
extension ADOPObservableType {
  public func timeout(_ dueTime: Dispatch.DispatchTime) -> ADOPUtility.ADOPObservable<Self.Element>
}
@objc public protocol BIDMADNativeAdCommonInterface {
  @objc var isAdMob: Swift.Bool { get set }
  @objc init(with appid: Swift.String, placementId: Swift.String?, bidmadController: Swift.AnyObject, isDebug: Swift.Bool, isChildDirectedAds: Foundation.NSNumber?, loadCallback: @escaping ((ADOPUtility.BidmadNativeAdDataInterface?) -> Swift.Void), clickCallback: @escaping ((ADOPUtility.BidmadNativeAdDataInterface?) -> Swift.Void))
  @objc func remove()
}
public protocol BIDMADNativeAdCallbacks {
  var loadCallback: ((ADOPUtility.BidmadNativeAdDataInterface?) -> Swift.Void) { get }
  var clickCallback: ((ADOPUtility.BidmadNativeAdDataInterface) -> Swift.Void) { get }
}
@objc @_inheritsConvenienceInitializers @objcMembers open class BidmadTestEnvironment : ObjectiveC.NSObject {
  @objc public static var testMode: Swift.Bool
  @objc public static var testOverrideJSON: Foundation.NSString?
  @objc public static func displayText(_ text: Swift.String, bottomPosition: Swift.Bool = false)
  @objc public static func topViewController(base: UIKit.UIViewController? = UIApplication.shared.keyWindow?.rootViewController) -> UIKit.UIViewController?
  @objc public static func getTestADOPRewardVideoForSuccessCase() -> Foundation.Data
  @objc public static func getTestADOPRewardVideoForFailCase() -> Foundation.Data
  @objc public static func getTestRewardVideoForSuccessCase() -> Foundation.Data
  @objc public static func getTestInterstitialForSuccessCase() -> Foundation.Data
  @objc public static func getTestInterstitialForFailCase() -> Foundation.Data
  @objc public static func getTestBannerForSuccessCase() -> Foundation.Data
  @objc public static func getTestBannerForFailCase() -> Foundation.Data
  @objc public static func getTestBannerForSuccessCase_RAW() -> Foundation.Data
  @objc deinit
  @objc override dynamic public init()
}
public protocol ADOPObservableType {
  associatedtype Element
  func subscribe<Observer>(_ observer: Observer) -> ADOPUtility.ADOPDisposable where Observer : ADOPUtility.ADOPObserverType, Self.Element == Observer.Element
}
public class ADOPObservable<E> : ADOPUtility.ADOPObservableType {
  public typealias Element = E
  public init(_ subscribe: @escaping (ADOPUtility.ADOPObserver<E>) -> ADOPUtility.ADOPDisposable)
  public init<Observable>(_ source: Observable) where E == Observable.Element, Observable : ADOPUtility.ADOPObservableType
  public func subscribe<Observer>(_ observer: Observer) -> ADOPUtility.ADOPDisposable where E == Observer.Element, Observer : ADOPUtility.ADOPObserverType
  @objc deinit
}
extension ADOPObservable {
  public static func create(_ subscribe: @escaping (ADOPUtility.ADOPObserver<E>) -> ADOPUtility.ADOPDisposable) -> ADOPUtility.ADOPObservable<E>
}
extension ADOPObservableType {
  public func asObservable() -> ADOPUtility.ADOPObservable<Self.Element>
}
extension ADOPObservableType {
  public func subscribeOn(_ scheduler: ADOPUtility.ADOPScheduler) -> ADOPUtility.ADOPObservable<Self.Element>
}
extension ADOPObservableType {
  public func observeOn(_ scheduler: ADOPUtility.ADOPScheduler) -> ADOPUtility.ADOPObservable<Self.Element>
}
extension ADOPObservableType {
  public func map<R>(_ transform: @escaping (Self.Element) -> R) -> ADOPUtility.ADOPObservable<R>
  public func flatMap<R>(_ transform: @escaping (Self.Element) -> ADOPUtility.ADOPObservable<R>) -> ADOPUtility.ADOPObservable<R>
}
@objc public protocol BidmadNativeAdDataInterface {
  @objc init(identifier: Swift.Int)
  @objc var headline: Swift.String? { get set }
  @objc var body: Swift.String? { get set }
  @objc var callToAction: Swift.String? { get set }
  @objc var icon: UIKit.UIImage? { get set }
  @objc var starRating: Foundation.NSDecimalNumber? { get set }
  @objc var store: Swift.String? { get set }
  @objc var price: Swift.String? { get set }
  @objc var advertiser: Swift.String? { get set }
  @objc var nativeAdAdMob: Swift.AnyObject? { get set }
  @objc var nativeAdPangle: Swift.AnyObject? { get set }
  @objc var pangleMediaImageURL: Swift.String? { get set }
  @objc var pangleMediaVideoView: UIKit.UIView? { get set }
  @objc var description: Swift.String { get }
  @objc func remove()
}
extension ADOPUtility.BidmadAppLovinFailCases : Swift.Equatable {}
extension ADOPUtility.BidmadAppLovinFailCases : Swift.Hashable {}
extension ADOPUtility.BidmadAppLovinFailCases : Swift.RawRepresentable {}
extension ADOPUtility.AdStatus : Swift.Equatable {}
extension ADOPUtility.AdStatus : Swift.Hashable {}
extension ADOPUtility.bidmadSupportedBannerSize : Swift.Equatable {}
extension ADOPUtility.bidmadSupportedBannerSize : Swift.Hashable {}
extension ADOPUtility.bidmadSupportedBannerSize : Swift.RawRepresentable {}
extension ADOPUtility.BidmadInnerCallbackCases : Swift.Equatable {}
extension ADOPUtility.BidmadInnerCallbackCases : Swift.Hashable {}
extension ADOPUtility.BidmadFailCase : Swift.Equatable {}
extension ADOPUtility.BidmadFailCase : Swift.Hashable {}
extension ADOPUtility.BidmadFailCase : Swift.RawRepresentable {}
