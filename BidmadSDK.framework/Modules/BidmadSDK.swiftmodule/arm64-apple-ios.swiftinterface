// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BidmadSDK
import ADOPUtility
import AppTrackingTransparency
@_exported import BidmadSDK
import Foundation
import GoogleMobileAds
import Swift
import UIKit
import _Concurrency
@objc @objcMembers open class BIDMADAdmobNativeAd : ObjectiveC.NSObject, ADOPUtility.BIDMADNativeAdCommonInterface, ADOPUtility.BIDMADNativeAdCallbacks, GoogleMobileAds.GADNativeAdLoaderDelegate {
  @objc public static let TEST_ADMOB_NATIVEAD: Swift.String
  @objc public static let TEST_ADX_NATIVEAD: Swift.String
  @objc final public let appid: Swift.String
  @objc public var isAdMob: Swift.Bool
  @objc final public let loadCallback: ((ADOPUtility.BidmadNativeAdDataInterface?) -> Swift.Void)
  @objc final public let clickCallback: ((ADOPUtility.BidmadNativeAdDataInterface) -> Swift.Void)
  @objc required public init(with appid: Swift.String, placementId: Swift.String?, bidmadController: Swift.AnyObject, isDebug: Swift.Bool, isChildDirectedAds: Foundation.NSNumber?, loadCallback: @escaping ((ADOPUtility.BidmadNativeAdDataInterface?) -> Swift.Void), clickCallback: @escaping ((ADOPUtility.BidmadNativeAdDataInterface?) -> Swift.Void))
  @objc public func loadNativeAd()
  @objc public func remove()
  @objc public func adLoader(_ adLoader: GoogleMobileAds.GADAdLoader, didFailToReceiveAdWithError error: Swift.Error)
  @objc public func adLoader(_ adLoader: GoogleMobileAds.GADAdLoader, didReceive nativeAd: GoogleMobileAds.GADNativeAd)
  @objc deinit
}
extension BidmadSDK.BIDMADAdmobNativeAd : GoogleMobileAds.GADNativeAdDelegate {
  @objc dynamic public func nativeAdDidRecordImpression(_ nativeAd: GoogleMobileAds.GADNativeAd)
  @objc dynamic public func nativeAdDidRecordClick(_ nativeAd: GoogleMobileAds.GADNativeAd)
  @objc dynamic public func nativeAdWillPresentScreen(_ nativeAd: GoogleMobileAds.GADNativeAd)
  @objc dynamic public func nativeAdWillDismissScreen(_ nativeAd: GoogleMobileAds.GADNativeAd)
  @objc dynamic public func nativeAdDidDismissScreen(_ nativeAd: GoogleMobileAds.GADNativeAd)
  @objc dynamic public func nativeAdWillLeaveApplication(_ nativeAd: GoogleMobileAds.GADNativeAd)
}
extension BidmadSDK.BIDMADAdmobNativeAd : GoogleMobileAds.GADVideoControllerDelegate {
  @objc dynamic public func videoControllerDidPlayVideo(_ videoController: GoogleMobileAds.GADVideoController)
  @objc dynamic public func videoControllerDidEndVideoPlayback(_ videoController: GoogleMobileAds.GADVideoController)
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) open class BidmadParentUIView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func hitTest(_ point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> UIKit.UIView?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol BIDMADNativeAdDelegate {
  @objc func bidmadNativeAd(loadedAd: BidmadSDK.BIDMADNativeAd)
  @objc func bidmadNativeAd(clickedAd: BidmadSDK.BIDMADNativeAd)
  @objc func bidmadNativeAdAllFail(_ error: Foundation.NSError)
}
public struct BIDMADNativeAdError {
}
@_inheritsConvenienceInitializers @objc open class BIDMADNativeAdLoader : ObjectiveC.NSObject {
  @objc weak public var delegate: BidmadSDK.BIDMADNativeAdDelegate?
  @objc required override dynamic public init()
  @objc deinit
  @objc public func request(for zoneID: Swift.String)
  public static func nativeAdSetup(for nativeAd: BidmadSDK.BIDMADNativeAd, viewController: UIKit.UIViewController, adView: BidmadSDK.BIDMADNativeAdView)
  public static func cleanUp(for nativeAd: BidmadSDK.BIDMADNativeAd, adView: BidmadSDK.BIDMADNativeAdView)
}
@objc public protocol CompassDataRequestDelegate {
  @objc func DataRequestSuccess()
  @objc func DataRequestFail(_ errorReason: Swift.String)
}
public enum BidmadNetworkError : Swift.Error {
  case invalidURL, noData, networkError, jsonDecodeFail, noAd, noFirstAd
  public static func == (a: BidmadSDK.BidmadNetworkError, b: BidmadSDK.BidmadNetworkError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class BidmadNetwork : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
public enum BidmadSendLogType : Swift.String {
  case req
  case load
  case nofill
  case click
  case noshow
  case close
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc open class BidmadUtility : ObjectiveC.NSObject {
  @objc public static func gdprSettingToOptionalBool() -> Foundation.NSNumber?
  @objc public static func bidmadSwiftSort(_ adInfoArray: [BidmadSDK.BidmadAdInfo]) -> [BidmadSDK.BidmadAdInfo]
  @objc override dynamic public init()
  @objc deinit
}
@objc open class BidmadAdInfo : ObjectiveC.NSObject {
  @objc public var adInfoDict: Swift.Dictionary<Swift.String, Any>
  @objc final public let adInfoKey: Swift.String
  @objc final public let adNetworkType: Swift.String
  @objc public var floorPrice: Swift.Float
  @objc final public let appID: Swift.String
  @objc final public let pubID: Swift.String
  @objc final public let isOBH: Swift.Bool
  @objc final public let originalOrder: Swift.Int
  @objc required public init(adInfoDict: Swift.Dictionary<Swift.String, Any>, adInfoKey: Swift.String, adNetworkType: Swift.String?, floorPrice: Foundation.NSNumber?, appID: Swift.String?, pubID: Swift.String?, isOBH: Foundation.NSNumber?, originalOrder: Foundation.NSNumber?)
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc deinit
}
extension UIKit.UIDevice {
  @objc @_Concurrency.MainActor(unsafe) public static let bidmadModelNameChecker: Swift.String
}
@objc @objcMembers open class BIDMADNativeAd : ObjectiveC.NSObject, Swift.Identifiable, ADOPUtility.BidmadNativeAdDataInterface {
  @objc public var id: Swift.Int
  @objc required public init(identifier: Swift.Int)
  @objc public var headline: Swift.String?
  @objc public var body: Swift.String?
  @objc public var callToAction: Swift.String?
  @objc public var icon: UIKit.UIImage?
  @objc public var starRating: Foundation.NSDecimalNumber?
  @objc public var store: Swift.String?
  @objc public var price: Swift.String?
  @objc public var advertiser: Swift.String?
  @objc public var nativeAdAdMob: Swift.AnyObject?
  @objc public var nativeAdPangle: Swift.AnyObject?
  @objc public var mediaContent: GoogleMobileAds.GADMediaContent?
  @objc public var mediaView: GoogleMobileAds.GADMediaView?
  @objc public var pangleMediaImageURL: Swift.String?
  @objc public var pangleMediaVideoView: UIKit.UIView?
  @objc public var pangleMediaImageView: UIKit.UIImageView?
  @objc override dynamic open var description: Swift.String {
    @objc get
  }
  @objc public func remove()
  public typealias ID = Swift.Int
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class MediationTableView : UIKit.UIView {
  @objc @_Concurrency.MainActor(unsafe) public init(frame: CoreGraphics.CGRect, adOrder: [Swift.String], adEcpm: [Swift.String], adFill: [Swift.String], tableViewCellHeight: Swift.Int)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BidmadSDK.MediationTableView : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
}
extension BidmadSDK.MediationTableView : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
extension BidmadSDK.BidmadNetworkError : Swift.Equatable {}
extension BidmadSDK.BidmadNetworkError : Swift.Hashable {}
extension BidmadSDK.BidmadSendLogType : Swift.Equatable {}
extension BidmadSDK.BidmadSendLogType : Swift.Hashable {}
extension BidmadSDK.BidmadSendLogType : Swift.RawRepresentable {}
